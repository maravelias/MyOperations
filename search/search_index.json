{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MyOperations Documentation","text":""},{"location":"#project-summary","title":"Project Summary","text":"<p>MyOperations is a web-based application designed to manage operations effectively. Its primary focus includes handling customers, their contacts, and users within the system.</p> <p>Key features of the application: - Role-Based Access Control (RBAC) to ensure users have appropriate permissions. - User Authentication and Localization with multi-language support and default credentials functionality. - Detailed UI for managing entities such as Customers, Contacts, and Users. - Adherence to best practices for modularity and maintainability.</p> <p>The project uses Vaadin Flow to create responsive web UIs and incorporates Spring Security for secure user authentication and authorization. It leverages Jmix (an extension of Spring Boot) for rapid development, rich data management, and business logic.</p>"},{"location":"#technology-stack","title":"Technology Stack","text":""},{"location":"#1-backend-frameworks-and-libraries","title":"1. Backend Frameworks and Libraries","text":"<ul> <li>Spring Boot: Provides core application development features and dependency injection.</li> <li>Jmix: Facilitates business logic, entity management, and UI design for enterprise applications.</li> <li>Spring Security: Ensures robust authentication and authorization.</li> <li>HikariCP: Provides database connection pool management.</li> </ul>"},{"location":"#2-frontend-frameworks-and-tools","title":"2. Frontend Frameworks and Tools","text":"<ul> <li>Vaadin Flow: Java-based framework for modern web UIs with a focus on server-side development.</li> <li>Vaadin's Lumo Theme: A customizable design theme for a rich user interface.</li> <li>Progressive Web Application (PWA): Enhances mobile usability with offline capabilities.</li> </ul>"},{"location":"#3-utilities","title":"3. Utilities","text":"<ul> <li>SLF4J and Logback: Used for logging and debugging in the application.</li> <li>Jakarta Persistence API: Manages entities for performing database operations.</li> <li>Apache Commons Lang: Provides utility methods, especially for working with Strings.</li> </ul>"},{"location":"#4-database","title":"4. Database","text":"<ul> <li>JDBC with HikariCP: Used for connecting to and executing operations on databases.</li> </ul>"},{"location":"#5-security-frameworks","title":"5. Security Frameworks","text":"<ul> <li>Spring Security: Enhances application security with robust role- and permission-based controls.</li> <li>Custom Role Policies: Resource-based role policies defined in the Jmix framework.</li> </ul>"},{"location":"#6-build-and-configuration","title":"6. Build and Configuration","text":"<ul> <li>Maven: A build automation tool for dependency management and project build lifecycle.</li> <li>Application Configuration: Managed via Spring Boot properties (e.g., <code>application.properties</code>).</li> </ul>"},{"location":"#7-localization","title":"7. Localization","text":"<ul> <li>Multi-locale Support: Dynamically adjusts locale settings based on user preferences or session settings.</li> </ul>"},{"location":"#notable-features","title":"Notable Features","text":""},{"location":"#1-entity-management","title":"1. Entity Management","text":"<ul> <li>Dedicated views for managing customers and their contacts.</li> <li>User management includes password encoding and role assignments.</li> </ul>"},{"location":"#2-access-control","title":"2. Access Control","text":"<ul> <li>Security roles such as <code>FullAccessRole</code> and <code>UiMinimalRole</code> are defined, enabling fine-grained access control.</li> </ul>"},{"location":"#3-multi-language-support","title":"3. Multi-Language Support","text":"<ul> <li>Interfaces and error messages are localized using the <code>LocaleChangeObserver</code> and custom translations.</li> </ul>"},{"location":"#4-modular-development","title":"4. Modular Development","text":"<ul> <li>Separation of concerns with <code>@ViewController</code> and <code>@ViewDescriptor</code> annotations for views, ensuring a decoupled UI layer.</li> </ul>"},{"location":"#5-customization","title":"5. Customization","text":"<ul> <li>Custom <code>SecurityFilterChain</code> configurations for public API endpoints (e.g., <code>/actuator/**</code>).</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0. See the LICENSE file for further details.</p>"}]}